read.csv('~/Data for Research Methods 2')
getwd()
read.csv("C:/Users/Tyler/Documents/Research Methods/dataforremeth2")
read.csv("C:/Users/Tyler/Documents/Research Methods/dataforremeth2.csv")
read.csv("C:/Users/Tyler/Documents/Research Methods/dataforremeth2.csv")
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library("tidyverse")
library(tidyverse)
installed.packages()
install.package("tidyverse")
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
>library(tidyverse)
library(tidyverse)
library(tidyverse)
load("~/Research Methods/.RData")
library(tidyverse)
dataforremeth2 <- read.csv("~/research methods/dataforremeth2.csv", header=FALSE)
View(dataforremeth2)
my.df <- (read.csv("~reasearch methods/dataforremeth2.cvs"))
data <- read.csv(file.choose(), header = TRUE)
ggplot(data = data) + geom_boxplot(mapping = aes(x = species, y = X.veg, color = species))
library(tidyverse)
ggplot(data = data) + geom_boxplot(mapping = aes(x = species, y = X.veg, color = species))
ggplot(data = data) + geom_boxplot(mapping = aes(x = species, y = X.veg, fill = species))
ggplot(data = data) + geom_histogram(mapping = aes(x = species, y = X.veg, fill = species))
batting <- as_tibble(Lahman::Batting)
batters <- batting %>%
group_by(playerID) %>%
summarise(
ba = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),
ab = sum(AB, na.rm = TRUE)
)
batters %>%
filter(ab > 100) %>%
ggplot(mapping = aes(x = ab, y = ba)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
diamonds %>%
count(cut)
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = carat), binwidth = 0.5)
data <- read.csv(file.choose(), header = TRUE)
View(data)
ggplot(data = data, mapping = aes(x = X.veg, colour = species)) +
geom_freqpoly(binwidth = 0.1)
ggplot(data = data, mapping = aes(x = X.veg, colour = species)) + geom_freqpoly(binwidth = 1)
ggplot(data = data, mapping = aes(x = X.veg, colour = species)) + geom_freqpoly(binwidth = 5)
data <- read.csv(file.choose(), header = TRUE)
ggplot(data = data, mapping = aes(x = X.veg, colour = species)) + geom_freqpoly(binwidth = 5)
ggplot(data = data, mapping = aes(x = X.veg, colour = species)) + geom_freqpoly(binwidth = 5) + ggtitle("Nesting Vegetation") + xlab("Precent Vegetation") + ylab("Count")
View(data)
View(data)
setwd("C:\Users\Tyler\Documents\research methods")
setwd("\Users\Tyler\Documents\research methods")
setwd("/Users/Tyler/Documents/research methods")
original.df <- read.csv("data_re_meth2.csv")
View(data)
original.df <- read.csv("data_re_meth2.csv")
# STEP 1: Replace "NA" with "0"
original.df[is.na(original.df)] <- 0
View(original.df)
# STEP 2: For coloumns 7-16, "0" should be replaced with "NA"
original.df[, 7:16][original.df[, 7:16] == 0] <- NA
# STEP 3: The two different data sets need to be seperated into two different dataframes
percentcoverage.df <- select(original.df, species, photo, X.rock, X.veg, X.mud.dirt, X.other)
rocksize.df <- select(original.df, species, photo, X1, X2, X3, X4, X5, X6, X7, X8, X9, X10)
View(percentcoverage.df)
View(rocksize.df)
# STEP 4: Rename columns X1-X10, 1-10 in rocksize.df
names(rocksize.df)[names(rocksize.df) == 'X1'] <- '1'
# STEP 4: Rename columns X1-X10, 1-10 in rocksize.df
names(rocksize.df)[names(rocksize.df) == 'X1', 'X2', 'X3', 'X4', 'X5', 'X6', 'X7', 'X8', 'X9', 'X10'] <- '1', '2', '3', '4', '5', '6', '7', '8', '9', '10',
### repeat for X2 <- 2, X3 <- 3, etc
# STEP 5: Edit 'species' coloumn to have no numbers for both dataframes
correctedspecies <- gsub("[[:digit:]]","",rocksize.df1$species)
# STEP 4: Rename columns X1-X10, 1-10 in rocksize.df
names(rocksize.df)[names(rocksize.df) == 'X1'] <- '1',
### repeat for X2 <- 2, X3 <- 3, etc
# STEP 5: Edit 'species' coloumn to have no numbers for both dataframes
correctedspecies <- gsub("[[:digit:]]","",rocksize.df1$species)
# STEP 4: Rename columns X1-X10, 1-10 in rocksize.df
names(rocksize.df)[names(rocksize.df) == 'X1'] <- '1',
### repeat for X2 <- 2, X3 <- 3, etc
# STEP 5: Edit 'species' coloumn to have no numbers for both dataframes
correctedspecies <- gsub("[[:digit:]]","",rocksize.df1$species)
# STEP 4: Rename columns X1-X10, 1-10 in rocksize.df
names(rocksize.df)[names(rocksize.df) == 'X1'] <- '1' %>%
names(rocksize.df)[names(rocksize.df) == 'X2'] <- '2' %>%
names(rocksize.df)[names(rocksize.df) == 'X3'] <- '3' %>%
names(rocksize.df)[names(rocksize.df) == 'X4'] <- '4' %>%
names(rocksize.df)[names(rocksize.df) == 'X5'] <- '5' %>%
names(rocksize.df)[names(rocksize.df) == 'X6'] <- '6' %>%
names(rocksize.df)[names(rocksize.df) == 'X7'] <- '7' %>%
names(rocksize.df)[names(rocksize.df) == 'X8'] <- '8' %>%
names(rocksize.df)[names(rocksize.df) == 'X9'] <- '9' %>%
names(rocksize.df)[names(rocksize.df) == 'X10'] <- '10'
# STEP 4: Rename columns X1-X10, 1-10 in rocksize.df
names(rocksize.df)[names(rocksize.df) == 'X1'] <- '1' +
names(rocksize.df)[names(rocksize.df) == 'X2'] <- '2' +
names(rocksize.df)[names(rocksize.df) == 'X3'] <- '3' +
names(rocksize.df)[names(rocksize.df) == 'X4'] <- '4' +
names(rocksize.df)[names(rocksize.df) == 'X5'] <- '5' +
names(rocksize.df)[names(rocksize.df) == 'X6'] <- '6' +
names(rocksize.df)[names(rocksize.df) == 'X7'] <- '7' +
names(rocksize.df)[names(rocksize.df) == 'X8'] <- '8' +
names(rocksize.df)[names(rocksize.df) == 'X9'] <- '9' +
names(rocksize.df)[names(rocksize.df) == 'X10'] <- '10'
# STEP 4: Rename columns X1-X10, 1-10 in rocksize.df
names(rocksize.df)[names(rocksize.df) == 'X1'] <- '1' +
names(rocksize.df)[names(rocksize.df) == 'X2'] <- '2' +
names(rocksize.df)[names(rocksize.df) == 'X3'] <- '3' +
names(rocksize.df)[names(rocksize.df) == 'X4'] <- '4' +
names(rocksize.df)[names(rocksize.df) == 'X5'] <- '5' +
names(rocksize.df)[names(rocksize.df) == 'X6'] <- '6' +
names(rocksize.df)[names(rocksize.df) == 'X7'] <- '7' +
names(rocksize.df)[names(rocksize.df) == 'X8'] <- '8'
# STEP 4: Rename columns X1-X10, 1-10 in rocksize.df
names(rocksize.df)[names(rocksize.df) == 'X1'] <- '1'
names(rocksize.df)[names(rocksize.df) == 'X2'] <- '2'
names(rocksize.df)[names(rocksize.df) == 'X3'] <- '3'
names(rocksize.df)[names(rocksize.df) == 'X4'] <- '4'
names(rocksize.df)[names(rocksize.df) == 'X5'] <- '5'
names(rocksize.df)[names(rocksize.df) == 'X6'] <- '6'
names(rocksize.df)[names(rocksize.df) == 'X7'] <- '7'
names(rocksize.df)[names(rocksize.df) == 'X8'] <- '8'
names(rocksize.df)[names(rocksize.df) == 'X9'] <- '9'
names(rocksize.df)[names(rocksize.df) == 'X10'] <- '10'
correctedspecies <- gsub("[[:digit:]]","",rocksize.df1$species)
correctedspecies <- gsub("[[:digit:]]","",rocksize.df$species)
correctedspecies <- data.frame(correctedspecies)
correctedspecies$ID <- 1:nrow(correctedspecies)
rocksize.df$ID <- 1:nrow(rocksize.df)
merged <- merge(x = rocksize.df, y = correctedspecies, by = "ID", sort = FALSE)
merged$species <- NULL
rocksize.df <- merged[, c(1, 13, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)]
rocksize.df$ID <- NULL
names(rocksize.df)[names(rocksize.df) == 'correctedspecies'] <- 'species'
# STEP 6: In rocksize.df, create seperate columns for 'rock.num' and 'rock.circumference'
rocksize.df <- rocksize.df %>%
gather('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', key = "rock#", value = "rock.circumference")
rocksize.df <- rocksize.df[rocksize.df$species != 'home', ]
# STEP 7: Create boxplot of rocksize in relation to species
ggplot(data = rocksize.df, mapping = aes(x = species, y = rock.circumference)) +
geom_boxplot(varwidth = TRUE)
View(correctedspecies)
View(merged)
View(original.df)
View(percentcoverage.df)
View(rocksize.df)
View(rocksize.df)
View(correctedspecies)
View(merged)
View(rocksize.df)
View(merged)
View(rocksize.df)
View(rocksize.df)
# STEP 7: Create boxplot of rocksize in relation to species
ggplot(data = rocksize.df, mapping = aes(x = species, y = rock.circumference, color = species)) +
geom_boxplot(varwidth = TRUE) +
ggtitle("Rock Circumference") +
xlab("Species") +
ylab("Circumference (cm)")
# STEP 7: Create boxplot of rocksize in relation to species
ggplot(data = rocksize.df, mapping = aes(x = species, y = rock.circumference, fill = species)) +
geom_boxplot(varwidth = TRUE) +
ggtitle("Rock Circumference") +
xlab("Species") +
ylab("Circumference (cm)")
write_csv(percentcoverage.df, "percentcoverage.csv")
write_csv(rocksize.df, "rocksize.csv")
write_delim(correctedspecies, "correctedspecies.csv")
write_csv(correctedspecies, "correctedspecies.csv")
write_csv(merged, "merged.csv")
write_csv(original.df, "original.csv")
# STEP 7: Create boxplot of rocksize in relation to species
ggplot(data = rocksize.df, mapping = aes(x = species, y = rock.circumference)) +
geom_boxplot(varwidth = TRUE) +
ggtitle("Rock Circumference") +
xlab("Species") +
ylab("Circumference (cm)")
# STEP 7: Create boxplot of rocksize in relation to species
ggplot(data = rocksize.df, mapping = aes(x = species, y = rock.circumference)) +
geom_boxplot(varwidth = TRUE) +
ggtitle("Rock Diameter") +
xlab("Species") +
ylab("Diameter (cm)")
percentcoverage.df$ID <- 1:nrow(percentcoverage.df)
merged2 <- merge(x = percentcoverage.df, y = correctedspecies, by = "ID", sort = FALSE)
merged2$species <- NULL
percentcoverage.df <- merged2[, c(1, 7, 2, 3, 4, 5, 6)]
percentcoverage.df$ID <- NULL
names(percentcoverage.df)[names(percentcoverage.df) == 'correctedspecies'] <- 'species'
percentcoverage.df <- percentcoverage.df[percentcoverage.df$species != 'home', ]
names(percentcoverage.df)[names(percentcoverage.df) == 'X.rock'] <- 'rock'
names(percentcoverage.df)[names(percentcoverage.df) == 'X.veg'] <- 'vegetation'
names(percentcoverage.df)[names(percentcoverage.df) == 'X.mud.dirt'] <- 'mud.dirt'
names(percentcoverage.df)[names(percentcoverage.df) == 'X.other'] <- 'other'
percentcoverage.df <- percentcoverage.df %>%
gather('rock', 'vegetation', 'mud.dirt', 'other', key = "ground.type", value = "percent.cover")
# STEP 10: Create graph of percent coverage in relation to species
ggplot(data = percentcoverage.df, mapping = aes(x = ground.type, y = percent.cover)) +
geom_boxplot() +
facet_wrap(~ species, nrow = 2) +
coord_flip()
write_csv(percentcoverage.df, "percentcoverage.csv")
write_csv(merged2, "merged2.csv")
which git
git --version
mysisgit
mysysgit
echo "# BIOL5023T-BRICK" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/tdentre/BIOL5023T-BRICK.git
git push -u origin master
echo "A line I wrote on my local computer" >> README.md
